Due Date: ####    Max Points: 130.0

Create in Python a program that receives as input a finite state machine and produces the equivalent regular expression.

Project summary:
Your program will load data from an input file, and based on that data construct a finite state machine (FSM). Your program will then translate the FSM into a regular expression that accepts the same regular language using Kleene's theorem (part 1), found in our textbook on page 801 / pdf 950. We will discuss this with more detail in class.

Detailed instructions:
Your program will:
 - Load a data set file (see attached example)
   - First line indicates number of datasets
   - Each data set has:
     - List of states (comma delimited)
     - Alphabet (comma delimited)
     - Accepting state (from list of states)
     - Starting state (from list of states)
     - Number of transitions (integer)
     - transitions, one per line (space delimited)
       - starting state (from list of states)
       - transition input (from alphabet)
       - ending state (from list of states)
     - Number of valid and invalid strings (2 integers)
     - Valid strings, one per line (constructed from alphabet)
     - Invalid strings, one per line (constructed from alphabet)
     - A regular expression (RE) that matches the same regular language as the FSM
 - Construct a FSM from the input data
 - Translate FSM to RE using Kleene's theorem
   - Construct collection of R terms, each corresponding to the RE matching an input that goes from state i to state j going through through states numbered no higher than k.
   - Iteratively build R terms corresponding to higher k values out of lower k values
   - The final RE is the union of the R terms going from the initial state to any accepting state
 - Verify that the original RE (loaded directly from the data set) and the RE from the FSM both:
   - Accept the valid strings
   - Reject the invalid strings
   - NOTE: Use the python 're' module for help matching regular expressions (more detail in class)

 - In your README.txt documentation, describe a regular language of your own choosing.
   - The regular language must be defined in prose.
   - A hand-written FSM and hand-written regular expression dataset must be provided
     in an accompanying dataset file. (Filename: "fsm_and_regex_data.txt")
   - The regular expression must be at least 5 characters long.
   - The FSM must include:
     - At least 3 states.
     - At least 2 characters in the alphabet.
     - You must have both accepting and non-accepting states.
 - The datasets are to include at least 5 strings that are accepted.
 - The datasets are to include at least 5 strings that are not accepted.
 - NOTE: The regular expression generated by your FSM-to-RE translator is not expected
         to be identical to your hand-written regular. They should both accept the same
         regular language.

Your submission will include the following files:
 - Your python code module
 - Your input data file: "fsm_and_regex_data.txt" (I will test using this filename)
 - Your README.txt file, including:
   - A brief description of the project
   - A prose description of the regular language of your making
   - A list of any known bugs and issues
   - A TODO list of a few future improvements
 - A screenshot of the running program

This assignment uses a rubric. Please review the rubric prior to beginning the assignment to become familiar with the expectations for successful completion.
--------------------------------------------------------------------------------
